package in.featureextractor;



/**
 *This class extends the abstract JavaBaseListener class and uses the JavaParser class generated by
 *ANTLR to perform the parsing. Both of these classes are included as import statements.    
 *
 *@see in.lexPar.JavaBaseListener
 *@see in.lexPar.JavaParser
 */
import in.desco.tool.Constants;
import in.lexpar.JavaBaseListener;
import in.lexpar.JavaParser;
import org.antlr.v4.runtime.misc.NotNull;

/**
 *This class is defined to override various auto-generated function in JavaBaseListener class
 *and call the necessary functionality defined in FeatureExtractionTask class to perform the 
 *FeatureExtractionTask of Java programming language files.
 *@see in.lexpar.JavaParser
 *@see in.lexpar.JavaBaseListener
 *@see FeatureExtractionTask
 */

public class JavaFeatureExtractor extends JavaBaseListener 
{
	private FeatureExtractionTask t;
	/**
     * This is a constructor defined to initialize the FeatureExtractionTask class object
     * @param featureExtractionTask an object of FeatureExtractionTask class 
     */
	public JavaFeatureExtractor (FeatureExtractionTask featureExtractionTask)  { 
		//t is an object of FeatureExtractor class with private scope 
		this.t = featureExtractionTask; 
		}	
	
	/**
     * This is a delegator function which calls the enterCompilationUnit function
     * of FeatureExtractionTask class to store the information related to compilation unit.
     * Compilation unit is the root node of the parse tree. 
     * <p>
     * To perform this, the enterCompilationUnit of FeatureExtractionTask class is called
     * with the input argument as the entire text content of compilation unit (cu) context.
     * This text content basically consists of the entire code content which comes under the cu node.
     * 
     * @param ctx object storing the context of compilation unit
    * 	@see {@link in.lexpar.JavaParser#compilationUnit()}
	 * @see {@link FeatureExtractionTask#enterCompilationUnit(String)} 
     */
	@Override public void enterCompilationUnit(@NotNull JavaParser.CompilationUnitContext ctx) 
	{ 
		t.enterCompilationUnit(ctx.getText());
	}
	
	/**
     * This is a delegator function which calls the storeClassInfo method of 
     * FeatureExtractionTask class to store the information related to <b>class</b> programming construct. 
     * <p>
     * To perform this, the storeClassInfo of FeatureExtractionTask class is called
     * with the input arguments as the text content and depth of the class construct.
     * This is fetched using the context of the ClassDeclarationContext method of JavaParser.
     * <p>
     * This text content contains the entire code content present in the class construct, 
     * while the depth retrs to the lexical depth of the point of occurrence of this class construct 
     * in the parse tree of the source file being processed.
     * 
     * @param ctx object storing the context of class declaration
     * @see in.lexpar.JavaParser#classDeclaration()
     * @see FeatureExtractionTask#storeClassInfo(String, int)
     */
	 @Override public void enterClassDeclaration(@NotNull JavaParser.ClassDeclarationContext ctx) 
	 { //stores the necessary class information
		t.storeClassInfo(ctx.getText());

		//Writing it to get class name
		String classDeclarationText = ctx.getText();
		System.out.println("classDeclarationtext:"+classDeclarationText);
		int startIndex = 9999;
		int endIndex = 9999;
		String className;
		startIndex = classDeclarationText.indexOf('s')+2;
		endIndex = classDeclarationText.indexOf('{');
		className = classDeclarationText.substring(startIndex,endIndex);
		 System.out.println("<<<<<<<<<Class Name:"+className);


	 }
	 
	 	/**
	     * This is a delegator function which calls the exitClass method of FeatureExtractionTask class 
	     * to perform some tasks as we exit a  <b>class</b> programming construct. 
	     * <p>
	     * To perform this, the exitClass method of FeatureExtractionTask class is called.
	     * 
	     * @param ctx object storing the context of class body declaration
	     * @see in.lexpar.JavaParser#classBodyDeclaration()
	     * @see FeatureExtractionTask#exitClass()
	     */ 
	 @Override public void exitClassBodyDeclaration(@NotNull JavaParser.ClassBodyDeclarationContext ctx) 
	 { //tasks to be perfomed as we exit a class
		 //System.out.println("Here exitclass working");
		 t.exitClass();
	 }
	 
	 /**
	  * This is a delegator function which calls the enterInitDeclarator method
	  * of FeatureExtractionTask class to store the information related to
	  * <b>variables</b> in programming languages. 
	  * <p>
	  * To perform this, we call the enterInitDeclarator method of FeatureExtractorTask class
	  * with the arguments as the context body as text and depth of occurrence of variable.
	  * Depth here refers to the lexical depth of the point of occurrence of this class construct 
	  * in the parse tree of the source file being processed.
	  *  
	  *   @param ctx object storing the context of variable declaration Id
	  *   @see in.lexpar.JavaParser#variableDeclaratorId()
	  *   @see FeatureExtractionTask#enterInitDeclarator(String, int)
	  */ 
	 @Override public void enterVariableDeclaratorId(@NotNull JavaParser.VariableDeclaratorIdContext ctx) 
	 { //Function to store the information related to variables

		 //System.out.println("now enterinitDeclarator called");
		t.enterInitDeclarator(ctx.getText());
		 System.out.println("Variable Names:"+ctx.getText());

	 }
	 
	 /**
	  *  This is a delegator function which calls the enterFunctionDefinition method
	  *  of FeatureExtractionTask class to store the information related to
	  *   <b>functions</b> in programming languages. 
	  *   <p>
	  *    To perform this, we call the enterFunctionDefinition method of FeatureExtractionTask class.
	  *     
	  *     @param ctx object storing the context of method declaration
	  *     @see in.lexpar.JavaParser#methodDeclaration()
	  *     @see FeatureExtractionTask#enterFunctionDefinition(String, int, String, String)
	  *     @see FeatureExtractionTask#storeFuncLength(String)
	  */ 
	 @Override public void enterMethodDeclaration(@NotNull JavaParser.MethodDeclarationContext ctx) 
	 { //Function to store the information related to functions
		// t.enterFunctionDefinition(ctx.getText(), ctx.depth(), ctx.getChild(1).getText(), ctx.getChild(2).getText());
		// System.out.println("enterMethodDeclaration");
		 t.enterFunctionDefinition(ctx.getText(), ctx.depth(), ctx.getChild(1).getText(), ctx.getChild(2).getText());
		 System.out.println("Method Declaration:"+ctx.getText());
		 String methodDeclarationText = ctx.getText().toString();


		 int startIndex = 9999;
		 int endIndex = 9999;
		 String methodName;
		 endIndex = methodDeclarationText.indexOf('(');
		 //System.out.println("<<<<here "+methodDeclarationText);
		// System.out.println(methodDeclarationText.indexOf("void"));
		 //System.out.println(methodDeclarationText.indexOf("int"));
		 int voidIndex = methodDeclarationText.indexOf("void");
		 int intIndex = methodDeclarationText.indexOf("int");
		 int floatIndex = methodDeclarationText.indexOf("float");
		 int doubleIndex = methodDeclarationText.indexOf("double");
		 int stringIndex = methodDeclarationText.indexOf("string");

		 if (voidIndex >= 0 && endIndex > voidIndex)
			 startIndex = voidIndex + 4;
		 else if(intIndex >= 0 && endIndex > intIndex){
			//System.out.println("<<<<<<<<<<in condition");;
			 startIndex = intIndex + 3;}
		 else if(floatIndex >= 0 && endIndex > floatIndex)
			 startIndex = floatIndex + 5;
		 else if(doubleIndex >= 0 && endIndex > doubleIndex)
			 startIndex = doubleIndex + 6;
		 else if (stringIndex >= 0 && endIndex > stringIndex)
			 startIndex = stringIndex + 6;
		 else
		 	System.out.println("An object");
		 //System.out.println(startIndex);
		 methodName = methodDeclarationText.substring(startIndex, endIndex);
		 System.out.println("<<<<<<<<<Method name:"+methodName);





	 }



	 
	 /**
	  * This is a delegator function which calls the storeFuncLength method
	  * of FeatureExtractionTask class to store the length of programming <b>functions</b>.
	  * 
	  * 	@param ctx object storing the context of method body
	  *		@see in.lexpar.JavaParser#methodBody()
	  * 	@see FeatureExtractionTask#storeFuncLength(String)
	  */
	  @Override public void enterMethodBody(@NotNull JavaParser.MethodBodyContext ctx) 
	 { 
		t.storeFuncLength(ctx.getText());
		 System.out.println("Method Body:"+ctx.getText());
	 }
	 
	  /**
	   * 	This is a delegator function which calls the exitFunc method of
	   * 	FeatureExtractionTask class to perform some operations as we exit a function.
	   * 
	   * 	@param ctx object storing the context of Method Body
	   * 	@see in.lexpar.JavaParser#methodBody()
	   * 	@see FeatureExtractionTask#exitFunc()
	   */
	 @Override public void exitMethodBody(@NotNull JavaParser.MethodBodyContext ctx) 
	 { //As we exit a function, we set the function ID to 0
		t.exitFunc();
	 }
	 /**
	  * 	This is a delegator function which calls the enterStatement method of 
	  * 	FeatureExtractionTask class to store information related to various iterative statements, 
	  * 	selection statements, jump statements, etc.
	  * 	
	  * 	@param	ctx	object storing the content of statement
	  * 	@see in.lexpar.JavaParser#statement()
	  * 	@see FeatureExtractionTask#enterStatement(String, int)
	  */
	/* @Override public void enterStatement(@NotNull JavaParser.StatementContext ctx)
	 { //Function to store the information related to iterative statement or selection statement
		 t.enterStatement(ctx.getText(), ctx.depth());
	 }
	 
	 /**
	  * This is a delegator function which calls the enterTryCatchBlock method of
	  *  FeatureExtractionTask class to store the information related to the Try and Catch Block.
	  *  
	  *    @param	ctx	object storing the context of catch clause
	  *    @see	in.lexpar.JavaParser#catchClause()
	  *    @see FeatureExtractionTask#enterTryCatchBlock(String, String, int)
	  */
	/* @Override public void enterCatchClause(@NotNull JavaParser.CatchClauseContext ctx)
	 {//Store the information related to catch block occurrence
		 t.enterTryCatchBlock("catch", ctx.getText(), ctx.depth());
	 }
	 
	 /**
	  * This is a delegator function which calls the storeOneLinerConstructInfo method of
	  * FeatureExtractionTask class to store the information related to import statements
	  * 
	  * @param ctx object storing the context of import statement
	  * @see in.lexpar.JavaParser#importDeclaration()
	  * @see FeatureExtractionTask#insertCountDepthLength(String, int, String, int)
	  */
	/*
	 @Override public void enterImportDeclaration(@NotNull JavaParser.ImportDeclarationContext ctx)
	 {//Store the information related to import statements
		 //t.insertCountDepthLength("import", ctx.getText()); //all import statements have "cu" as parent
		// t.insertCountDepthLength( ctx.getText()); //all import statements have "cu" as parent
	 }
	 */
}
